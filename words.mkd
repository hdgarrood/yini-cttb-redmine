# introduction

Hello, my name is Harry Garrood, and I'm going to talk to you about
Redmine, and how my work allowing Halarose to use it has resulted in
significant productivity gains.

# What I did

I did the work necessary to migrate from our old bug tracking software
to Redmine, an advanced web-based bug tracking and project management
application. This involved moving the data across, as well as setting
up and configuring it. I also wrote some code to interact with the
Redmine core, in order to extend its capabilities to better suit
Halarose's needs.

# Why track bugs?

So why track bugs? Ask any software developer, and they'll tell you that
every software project needs a database with details of all the known
and reported bugs. This is important for a number of reasons:

## Bugs should never be forgotten

It's impossible to keep more than 2 or 3 bugs in your head -- without
a bug tracking system, bugs will be forgotten about.

## Versions

When we are preparing for a release, we need to choose out of all the
unfixed bugs and unimplemented features, which we will fix or implement,
and which can be left for a later release. We also want to be able to
view this information after a release has gone out. Therefore it is
essential to have a record of the changelist for each version -- something
that is possible with a bug database.

## Support

If a customer has an issue which has already been reported, the
support staff can give them a much better answer in much less time
if they can find an existing entry in the bug database describing
their problem.

## Management

When using software like Redmine it is possible to answer
questions like: "What's a reasonable date for being ready for the next
release?", or "Are we dividing time between fixing bugs and adding new
features appropriately?"

# comparison with the old software

Redmine has given us a large number of advantages over the old software:

## integration

It is able to integrate with other tools we use in the development
process, such as:

### Subversion

Apache Subversion is a piece of software which we use at Halarose to
keep track of changes to our software. Whenever any of the source
files for Halarose's products are changed, we enter the changes into
Subversion, and other developers are able to get each others' changes
from the central repository.

Subversion is an immensely important tool for developing software,
because it lets you look back through the history to see when a
particular change was made, who did it, and why.

Redmine integrates with subversion -- for example, on the web page for
an issue on Redmine, there is a list of all the changes to the code
relating to that particular issue.

### Jenkins

When you need to produce a working version of some software (so, you may
want to test it, or to create a release which is sent to customers), you
need to change it from plain text (or 'source' files), which people can
read, into 'executable' files, which computers can read. This process is
called 'compiling' or 'building', and because it happens a lot within
Halarose, we use 'continuous integration' software called Jenkins to
keep track of all these builds for us. It does things like:

* Keeping track of the executable files produces by builds, and
* Keeping track of whether builds were successful

Jenkins is especially important for testing, as it allows us to find
which version a particular problem started happening in, which makes it
easy to find which particular change caused it.

Redmine's integration with Jenkins allow us to see on the issue page
which build each of the changes was first built in, and whether that
build succeeded, which further increases testers' productivity.

## searching

Searching and querying was very difficult with the old software. This
meant that duplicate bug reports were often entered, because people
didn't realise that a similar bug report already existed in the
database.

Redmine has built in search and query functions which allow Halarose
staff to quickly and efficiently extract the information they need to.
For example, this means that it is capable of generating todo lists for
testers or developers on the fly, greatly reducing the amount of time
spent in organising and prioritising tasks manually.

## notifications

Redmine is capable of sending email notifications, ensuring that people
are kept up to date on information relevant to them, and increasing the
efficiency of communication overall.

## release notes

With any new release, we need to produce release notes, which is a list
of all the changes we made: bugs we fixed, and new features we added.
Previously, this data was stored in a text file, which developers edited
after they finished working on a bug or feature.

I realised that this would be better off in the database, where it
would then be possible to not only have Redmine say how many bugs for an
upcoming release have had their release notes finished and how many
still need doing, but also have it generate a list of release notes
on-the-fly -- far better than the previous situation, where someone
would have to look through all the release notes, comparing them to the
bug database to ensure that no mistakes were made.

I wrote the code necessary for this functionality, and it has greatly
increased our productivity for getting releases out, as a large amount
of work which was previously done manually is now automated.

# Summary

The Redmine project has been a complete success. It has yielded a
great deal in terms of increased productivity for the
development, testing, and support teams. It has also been a significant
step in our longer-term objective of refining our whole software
development process, ultimately allowing faster development, fewer bugs,
and better quality products.

I will close with a testimonial from our lead software tester:

> I needed a reliable and flexible tool to
> prioritise my work flow and communicate with development and support
> teams effectively.  Harry's Redmine project has given me exactly that
> as well as an efficient means of keeping up-to-date with the scope of
> the various software releases we have planned.  The ease with which
> people can add comments and reply to my questions regarding a specific
> issue has certainly improved my time management and productivity.
> Thank you Harry!
